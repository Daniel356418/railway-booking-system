name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]

env:
  AZURE_CONTAINER_REGISTRY: railwayacr
  CLUSTER_NAME: railway-aks
  CLUSTER_RESOURCE_GROUP: railway-booking-rg
  NAMESPACE: railway-system
  CONTAINER_NAME: railway-booking-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

  build-and-push-container:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} .

    - name: Push Docker image with SHA tag
      run: docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}

    - name: Tag as latest
      run: docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest

    - name: Push latest tag
      run: docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest

  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push-container
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      run: |
        az aks get-credentials \
          --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} \
          --name ${{ env.CLUSTER_NAME }} \
          --overwrite-existing

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy application
      run: |
        kubectl apply -f k8s/ -n ${{ env.NAMESPACE }}

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/${{ env.CONTAINER_NAME }} -n ${{ env.NAMESPACE }}
        kubectl get pods,svc -n ${{ env.NAMESPACE }}